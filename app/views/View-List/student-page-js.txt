const applicationSettings = require("tns-core-modules/application-settings");
const { fromObject } = require('tns-core-modules/data/observable');
const httpModule = require("tns-core-modules/http");
const dialogs = require("tns-core-modules/ui/dialogs");
const searchBarModule = require("tns-core-modules/ui/search-bar");
//const observableModule = require("tns-core-modules/data/observable");
const ObservableArray = require("tns-core-modules/data/observable-array").ObservableArray;

/*observable פשוט תכין ליסט ריק ותקשר אליו 
observableובליחצה על כפתור חיפוש תשלוף נתונים מהמונגו ותשים ב 
שלו
*/

// Create ObservableArray with lenght
let myObservableArray1 = new ObservableArray();

// Create ObservableArray from array.
const teachers = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34];
myObservableArray1 = new ObservableArray(teachers);


// Create ObservableArray from arguments.
myObservableArray = new ObservableArray(1, 2, 3, 5, 8, 13, 21, 33, 55, 89);

var teachersArray = new ObservableArray();
//const vm = new observableModule.Observable();

const obj = fromObject({
    firstname: '',
    lastname: '',
    email: '',
    search: '',
    par: '',
    subj: 'Math',
    myObservableArray1: myObservableArray1,
    teachers: [{
            tch: "The Da Vinci Code",
            subject: 'Math'
        },
        { tch: "Harry Potter and the Chamber of Secrets" },
        { tch: "The Alchemist" },
        { tch: "The Godfather" },
        { tch: "Goodnight Moon" },
        { tch: "The Hobbit" },
    ]
});

exports.loaded = function(args) {
    var page = args.object;
    page.bindingContext = obj;

    //titlesArray.empty();
    //titlesArray.load();
    console.log("student page ");

    const firstItem = myObservableArray.getItem(0);
    const firstItem1 = myObservableArray1.getItem(0);
    console.log('first item myObservableArray : ', firstItem)
    console.log('first item1 myObservableArray1 : ', firstItem1)
    const secondItem = myObservableArray.getItem(1);
    const thirdItem = myObservableArray.getItem(2);


    myObservableArray.on(ObservableArray.changeEvent, (args) => {
        console.log(args.index); // Index of the changed item (in this case 7).
        console.log(args.action); // Action (In this case "update")
        console.log(args.addedCount); // Number of added items (In this case 1).
        console.log(args.removed); // Array of removed items (in this case 33).
    });
    myObservableArray.setItem(7, 34); // at seventh (7) index setting value of 34
    const seventhItem = myObservableArray.getItem(7);
    console.log(seventhItem)
    let u = JSON.parse(applicationSettings.getString('user'));
    obj.firstname = u.firstname;
    obj.lastname = u.lastname;
    obj.email = u.email;

    //const subj = obj.get('subj')

    httpModule.getJSON("https://final-project-lessons.herokuapp.com/teacher/subject")
        .then((result) => {
            //console.log("all teachers: ", result.data);
            //console.log("email teachers: ", result.data[0].email);
            obj.par = result.data[0].email
                //obj.teachers[6] = obj.par
            teachersArray.push(obj.par)
            const item123 = teachersArray.getItem(0);
            console.log(item123)
        }, (e) => {
            console.error(Error);
        });
};

function onListViewLoaded(args) {
    var page = args.object;
    page.bindingContext = obj;
}
exports.onListViewLoaded = onListViewLoaded;

function onTap(args) {
    const page = args.object.page;
    // >> list-view-refresh
    const listView = page.getViewById("listView");
    page.bindingContext.teachers.push({ tch: "Game of Thrones1" });
    page.bindingContext.teachers.push({ subject: "TV show" });
    // Manually trigger the update so that the new color is shown.
    listView.refresh();
    // << list-view-refresh

}
exports.onTap = onTap;

function onItemTap(args) {
    const index = args.index;
    console.log(`Second ListView item tap ${index}`);
}
exports.onItemTap = onItemTap;

exports.onSubmit = async function(args) {
    const searchBar = args.object;
    console.log(`Searching for ${searchBar.text}`);
}

exports.onClear = function(args) {
    const searchBar = args.object;
    console.log("Clear event raised");
}

/*
    vm.on(observableModule.Observable.propertyChangeEvent, (propertyChangeData) => {
        if (propertyChangeData.propertyName === "sbText") {
            const searchBar = propertyChangeData.object;
            console.log(`Input changed! New value: ${propertyChangeData.value}`);
        }
    });
    page.bindingContext = obj*/
exports.calTap = function(args) {
    const button = args.object;
    const page = button.page;
    const frame = page.frame;
    frame.navigate('views/calendar/calendar')
}